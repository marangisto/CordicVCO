#include <stdio.h>
#include <stdint.h>
#include <algorithm>

static uint16_t xs[] =
    { 3061, 2243, 1429, 1036, 3483, 3501, 1014, 627, 1845, 2653
    , 206, 3877, 3052, 607, 1836, 1439, 3872, 1005, 1824, 3474
    , 2268, 3895, 1006, 1040, 188, 1020, 1848, 2254, 2644, 628
    , 1419, 3470, 2643, 3900, 1028, 3486, 2268, 611, 1439, 197
    , 3479, 1432, 1837, 219, 1860, 3492, 600, 615, 3080, 1857
    , 3883, 1834, 3466, 3497, 1438, 3475, 3484, 2239, 2267, 3054
    , 3055, 3486, 3079, 1421, 3898, 1030, 1006, 2674, 614, 3068
    , 3052, 2260, 2263, 3871, 2677, 3901, 1042, 3891, 1447, 1424
    , 2660, 2665, 3466, 612, 3491, 3908, 1439, 1006, 3055, 1428
    , 3904, 3057, 3056, 2254, 2240, 632, 1834, 1420, 1444, 3884
    , 3906, 1825, 594, 1826, 2243, 3892, 2270, 1033, 2252
    , 1834, 2272, 1431, 3489, 202, 3485, 631, 1422, 2272
    , 1847, 2659, 1440, 2665, 633, 3064, 3480, 202, 3084
    , 205, 1434, 3091, 1856, 1041, 1008, 1425, 1421, 3467
    , 2658, 600, 3478, 2647, 623, 2267, 3088, 1028, 1834
    , 3881, 1429, 3086, 2679, 3067, 1449, 605, 1425, 626
    , 1038, 1044, 3051, 2243, 1825, 609, 1427, 3493, 2669
    , 616, 599, 2242, 2263, 1447, 2661, 3875, 622, 617
    , 3076, 3064, 1437, 3473, 2643, 3481, 635, 1840, 1853
    , 1414, 3462, 2648, 3468, 1022, 3075, 1445, 2661, 1862
    , 199, 622, 3497, 2238, 3464, 3876, 2681, 2245, 3496, 1862
    };

static uint16_t nxs = sizeof(xs) / sizeof(*xs);

int calibrate()
{
    printf("n = %u\n", nxs);

    std::sort(xs, xs + nxs);

    //for (uint16_t i = 0; i < nxs; ++i)
        //printf("n = %d\n", xs[i]);

    const uint16_t buckets = 10;
    const uint32_t spread = 4095 / (2 * buckets);
    uint32_t sums[buckets], counts[buckets];
    uint16_t k = 0;

    for (uint16_t i = 0; i < buckets; ++i)
        sums[i] = counts[i] = 0;

    sums[0] = xs[0];
    counts[0] = 1;

    for (uint16_t i = 1; i < nxs; ++i)
    {
        uint32_t avg = sums[k] / counts[k];
 
        //printf("x[%u] = %u, avg = %u\n", i, xs[i], avg);

        if (xs[i] > avg + spread)
            ++k;

        if (k == buckets)
        {
            printf("overrun x[%u] = %u, avg = %lu\n", i, xs[i], avg);
            exit(1);
        }

        sums[k] += xs[i];
        counts[k]++;
    }

    if (k + 1 != buckets)
    {
        printf("underrun, found only %u levels\n", k);
        exit(1);
    }

    for (uint16_t k = 0; k < buckets; ++k)
    {
        uint32_t avg = sums[k] / counts[k];
        printf("avg[%u] = %lu, count = %lu\n", k, avg, counts[k]);
    }

    printf("done!\n");

    return 0;
}

